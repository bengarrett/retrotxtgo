linters-settings:
  depguard:
    list-type: blacklist
    packages:
      # logging is allowed only by logutils.Log, logrus
      # is allowed to use only in logutils package
      - github.com/sirupsen/logrus
    packages-with-error-message:
      - github.com/sirupsen/logrus: "logging is allowed only by logutils.Log"
  dupl: # todo this kills testing
    # tokens count to trigger issue, 150 by default
    threshold: 500
  exhaustive:
    default-signifies-exhaustive: false
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true
  funlen:
    lines: 100
    statements: 50
  gci:
    local-prefixes: retrotxt.com/retrotxt
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 30
  godot:
    # check all top-level comments, not only declarations
    check-all: true
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: false
  gofumpt:
    # Choose whether or not to use the extra rules that are disabled
    # by default
    extra-rules: false
  goimports:
    local-prefixes: retrotxt.com/retrotxt
  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0
  gomnd:
    settings:
      mnd:
        # don't include the "operation" and "assign"
        checks: argument,case,condition,return
  govet:
    check-shadowing: false # todo enable and fix in code
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
  lll:
    line-length: 140
  maligned:
    suggest-new: true
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    #locale: UK
    ignore-words:
      - someword
  nolintlint:
    allow-leading-space: true # don't require machine-readable nolint directives (i.e. with no leading space)
    allow-unused: false # report any unused nolint directives
    require-explanation: false # don't require an explanation for nolint directives
    require-specific: false # don't require nolint directives to be specific about which linter is being skipped
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: true

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    - asciicheck
    - bodyclose
    - deadcode
    - depguard
    - errcheck
    - exhaustive
    - exportloopref
    - gochecknoinits
    - gci
    - gochecknoglobals # TODO
    - goconst
    #- gocritic # TODO
    - godot
    #- gofmt
    #- gofumpt
    - goerr113
    - goheader
    - golint
    - gomodguard
    - gomnd
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - interfacer
    - lll
    - maligned
    - misspell
    - nakedret
    - noctx
    - nolintlint
    - prealloc
    - rowserrcheck
    - scopelint
    - sqlclosecheck
    - staticcheck
    - structcheck
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    #- unused # do not use until version is in beta
    - varcheck
    - whitespace
    # don't enable:
    # - dupl # this breaks the linter
    # - dogsled
    # - funlen
    # - gocognit
    # - gocyclo
    # - godox
    # - goerr113
    # - goimports
    # - nestif
    # - nlreturn
    # - testpackage
    # - wsl
issues:
  max-same-issues: 0
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - path: main\.go
      linters:
        - gochecknoglobals
    - path: lib/config/config\.go
      linters:
        - maligned
    - path: lib/cmd/
      linters:
        - gochecknoglobals
        - gochecknoinits
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - unused
        - scopelint
        - gochecknoglobals
    - path: filesystem/read\.go
      linters:
        - unused
        #     # https://github.com/go-critic/go-critic/issues/926
    #     - linters:
    #         - gocritic
    #       text: "unnecessaryDefer:"
    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    - path: info/info\.go
      text: "weak cryptographic primitive"
      linters:
        - gosec
    # Exclude some staticcheck messages
    - linters:
        - gosec
      text: "G203:"
run:
  skip-dirs:
    - internal
    - lib/sauce
    - static
