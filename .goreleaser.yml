# .goreleaser.yml
#
# test the config:
# goreleaser check
# goreleaser release --snapshot --clean
#
# create a version tag and push it:
# git tag -a v0.1.0 -m "First release"
# git push origin v0.1.0

project_name: retrotxtgo
# make a variable description

before:
  hooks:
    - go mod tidy
builds:
  - id: BSD
    goos: ['freebsd']
    goarch: ['amd64']
  - id: Linux_Intel
    goos: ['linux']
    goarch: ['amd64']
  - id: Linux_arm64
    goos: ['linux']
    goarch: ['arm64']
  - id: macOS
    goos: ['darwin']
    goarch: ['amd64', 'arm64']
  - id: Windows
    goos: ['windows']
    goarch: ['amd64']
universal_binaries:
  - id: macOS
    name_template: "{{ .ProjectName }}"
    replace: true

archives:  
  - id: BSD
    builds: ['BSD']
    format: tar.gz
    files:
    - none*
    name_template: "{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}"
  - id: Linux_Intel
    builds: ['Linux_Intel']
    format: tar.gz
    files:
    - none*
    name_template: "{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}"
  - id: Linux_arm64
    builds: ['Linux_arm64']
    format: tar.gz
    files:
    - none*
    name_template: "{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}"
  - id: macOS
    builds: ['macOS']
    format: tar.gz
    files:
    - none*
    name_template: "{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}"
  - id: Windows
    builds: ['Windows']
    format: zip
    files:
    - none*
    name_template: "{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}"

nfpms:
  - id: Linux
    builds: ['Linux_Intel']
    file_name_template: "{{ .ProjectName }}"
    vendor: Ben Garrett.
    homepage: https://retrotxt.com/go
    maintainer: Ben Garrett <code.by.ben@gmail.com>
    description: Read legacy code page encoded textfiles in a modern Unicode terminal.
    license: LGPL 3.0
    formats:
      - apk
      - deb
      - rpm

changelog:
  skip: true
  use: git

upx:
  - 
    enabled: true
    ids: [Linux_Intel, Windows]
    # Valid options are from '1' (faster) to '9' (better), and 'best'.
    compress: best
    # Whether to try LZMA (slower).
    lzma: true
    # Whether to try all methods and filters (slow).
    brute: true
